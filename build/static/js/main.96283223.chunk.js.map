{"version":3,"sources":["services/notes.js","App.js","index.js"],"names":["axios","get","then","response","data","newObject","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"0PA8Be,EAfA,WAEX,OADgBA,IAAMC,IAfV,cAgBGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVE,SAAAC,GAEb,OADgBL,IAAMM,KApBV,aAoBwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALE,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAzBJ,aAyBI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCxBvCK,EAAO,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,OAAOP,GAAIG,EAAKH,IAC3BG,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KAIpCK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKJ,UAAU,SACZI,IAIDC,EAAS,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIR,6BACA,uGA6FSC,EAxFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAmBhBC,qBAZa,WACXC,IAICjC,MACG,SAACkC,GACCT,EAASS,QAKD,IAEhBC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAmCMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAC/B,GAAD,OAAUA,EAAKG,aAElE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAASc,IACvB,6BACE,4BAAQhB,QAAS,kBAAMe,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAIlC,4BACGU,EAAYE,KAAI,SAAChC,GAAD,OACf,kBAAC,EAAD,CACEiC,IAAKjC,EAAKH,GACVG,KAAMA,EACNC,iBAAkB,kBAvCD,SAACJ,GAC1B,IAAMG,EAAOgB,EAAMkB,MAAK,SAACC,GAAD,OAAOA,EAAEtC,KAAOA,KAClCuC,EAAW,2BAAQpC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDsB,EAAmB5B,EAAIuC,GAAa5C,MAAK,SAAC6C,GACxCpB,EAASD,EAAMgB,KAAI,SAAChC,GAAD,OAAWA,EAAKH,KAAOA,EAAKG,EAAOqC,SAEvDC,OAAM,SAAAC,GACLhB,EAAgB,SAAD,OACJvB,EAAKK,QADD,sCAGfmC,YAAW,WACTjB,EAAgB,QACf,KACLN,EAASD,EAAMe,QAAO,SAAAI,GAAC,OAAIA,EAAEtC,KAAOA,SAyBJ4C,CAAmBzC,EAAKH,WAItD,0BAAM6C,SAxDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBxC,QAASa,EACT4B,MAAM,IAAIC,MAAOC,cACjB7C,UAAW8C,KAAKC,SAAW,IAG7BzB,EAAmBoB,GAAYrD,MAAK,SAAC6C,GACnCpB,EAASD,EAAMmC,OAAOd,IACtBlB,EAAW,SA+CT,2BAAOiC,MAAOlC,EAASmC,SA1BJ,SAACV,GACxBxB,EAAWwB,EAAMW,OAAOF,UA0BpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,QCvGNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.96283223.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\n/* const getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n} */\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update \r\n}\r\n\r\n//export default { getAll, create, update }","import React, { useState, useEffect } from \"react\";\nimport noteService from \"./services/notes\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li className='note' id={note.id}>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n};\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  \n\n  const hook = () => {\n    noteService\n      .getAll()\n      /*       .then(response => {\n        setNotes(response.data)\n */ .then(\n        (initialNotes) => {\n          setNotes(initialNotes);\n        }\n      );\n  };\n\n  useEffect(hook, []);\n\n  console.log(\"render\", notes.length, \"notes\");\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService.update(id, changedNote).then((returnedNote) => {\n      setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    setNotes(notes.filter(n => n.id !== id));\n    })\n;\n  };\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// const promise = axios.get('http://localhost:3001/notes')\n// promise.then(response => {\n//   console.log(response)\n// })\n\n// axios\n//   .get('http://localhost:3001/notes')\n//   .then(response => {\n//     const notes = response.data\n//     console.log(notes)\n//   })\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}